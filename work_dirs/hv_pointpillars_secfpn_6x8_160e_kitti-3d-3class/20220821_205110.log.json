{"env_info": "sys.platform: linux\nPython: 3.7.0 (default, Sep  2 2018, 01:08:31) [GCC 7.3.0]\nCUDA available: True\nGPU 0: Tesla P100-PCIE-12GB\nCUDA_HOME: /usr/local/cuda-10.1\nNVCC: Cuda compilation tools, release 10.1, V10.1.24\nGCC: gcc (GCC) 7.3.0\nPyTorch: 1.6.0+cu101\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2019.0.5 Product Build 20190808 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.5.0 (Git Hash e2ac1fac44c5078ca927cb9b90e1b3066a0b2ed0)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75\n  - CuDNN 7.6.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, \n\nTorchVision: 0.7.0+cu101\nOpenCV: 4.6.0\nMMCV: 1.6.0\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.1\nMMDetection: 2.25.1\nMMSegmentation: 0.27.0\nMMDetection3D: 1.0.0rc4+unknown\nspconv2.0: False", "config": "voxel_size = [0.16, 0.16, 4]\nmodel = dict(\n    type='VoxelNet',\n    voxel_layer=dict(\n        max_num_points=32,\n        point_cloud_range=[0, -39.68, -3, 69.12, 39.68, 1],\n        voxel_size=[0.16, 0.16, 4],\n        max_voxels=(16000, 40000)),\n    voxel_encoder=dict(\n        type='PillarFeatureNet',\n        in_channels=4,\n        feat_channels=[64],\n        with_distance=False,\n        voxel_size=[0.16, 0.16, 4],\n        point_cloud_range=[0, -39.68, -3, 69.12, 39.68, 1]),\n    middle_encoder=dict(\n        type='PointPillarsScatter', in_channels=64, output_shape=[496, 432]),\n    backbone=dict(\n        type='SECOND',\n        in_channels=64,\n        layer_nums=[3, 5, 5],\n        layer_strides=[2, 2, 2],\n        out_channels=[64, 128, 256]),\n    neck=dict(\n        type='SECONDFPN',\n        in_channels=[64, 128, 256],\n        upsample_strides=[1, 2, 4],\n        out_channels=[128, 128, 128]),\n    bbox_head=dict(\n        type='Anchor3DHead',\n        num_classes=3,\n        in_channels=384,\n        feat_channels=384,\n        use_direction_classifier=True,\n        assign_per_class=True,\n        anchor_generator=dict(\n            type='AlignedAnchor3DRangeGenerator',\n            ranges=[[0, -39.68, -0.6, 69.12, 39.68, -0.6],\n                    [0, -39.68, -0.6, 69.12, 39.68, -0.6],\n                    [0, -39.68, -1.78, 69.12, 39.68, -1.78]],\n            sizes=[[0.8, 0.6, 1.73], [1.76, 0.6, 1.73], [3.9, 1.6, 1.56]],\n            rotations=[0, 1.57],\n            reshape_out=False),\n        diff_rad_by_sin=True,\n        bbox_coder=dict(type='DeltaXYZWLHRBBoxCoder'),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=2.0),\n        loss_dir=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.2)),\n    train_cfg=dict(\n        assigner=[\n            dict(\n                type='MaxIoUAssigner',\n                iou_calculator=dict(type='BboxOverlapsNearest3D'),\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.35,\n                min_pos_iou=0.35,\n                ignore_iof_thr=-1),\n            dict(\n                type='MaxIoUAssigner',\n                iou_calculator=dict(type='BboxOverlapsNearest3D'),\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.35,\n                min_pos_iou=0.35,\n                ignore_iof_thr=-1),\n            dict(\n                type='MaxIoUAssigner',\n                iou_calculator=dict(type='BboxOverlapsNearest3D'),\n                pos_iou_thr=0.6,\n                neg_iou_thr=0.45,\n                min_pos_iou=0.45,\n                ignore_iof_thr=-1)\n        ],\n        allowed_border=0,\n        pos_weight=-1,\n        debug=False),\n    test_cfg=dict(\n        use_rotate_nms=True,\n        nms_across_levels=False,\n        nms_thr=0.01,\n        score_thr=0.1,\n        min_bbox_size=0,\n        nms_pre=100,\n        max_num=50))\ndataset_type = 'KittiDataset'\ndata_root = '/data/cmpe249-fa22/kitti/'\nclass_names = ['Pedestrian', 'Cyclist', 'Car']\npoint_cloud_range = [0, -39.68, -3, 69.12, 39.68, 1]\ninput_modality = dict(use_lidar=True, use_camera=False)\nfile_client_args = dict(backend='disk')\ndb_sampler = dict(\n    data_root='/data/cmpe249-fa22/kitti/',\n    info_path='/data/cmpe249-fa22/kitti/kitti_dbinfos_train.pkl',\n    rate=1.0,\n    prepare=dict(\n        filter_by_difficulty=[-1],\n        filter_by_min_points=dict(Car=5, Pedestrian=5, Cyclist=5)),\n    classes=['Pedestrian', 'Cyclist', 'Car'],\n    sample_groups=dict(Car=15, Pedestrian=15, Cyclist=15),\n    points_loader=dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=4,\n        use_dim=4,\n        file_client_args=dict(backend='disk')),\n    file_client_args=dict(backend='disk'))\ntrain_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=4,\n        use_dim=4,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadAnnotations3D',\n        with_bbox_3d=True,\n        with_label_3d=True,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='ObjectSample',\n        db_sampler=dict(\n            data_root='/data/cmpe249-fa22/kitti/',\n            info_path='/data/cmpe249-fa22/kitti/kitti_dbinfos_train.pkl',\n            rate=1.0,\n            prepare=dict(\n                filter_by_difficulty=[-1],\n                filter_by_min_points=dict(Car=5, Pedestrian=5, Cyclist=5)),\n            classes=['Pedestrian', 'Cyclist', 'Car'],\n            sample_groups=dict(Car=15, Pedestrian=15, Cyclist=15),\n            points_loader=dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=4,\n                use_dim=4,\n                file_client_args=dict(backend='disk')),\n            file_client_args=dict(backend='disk')),\n        use_ground_plane=True),\n    dict(type='RandomFlip3D', flip_ratio_bev_horizontal=0.5),\n    dict(\n        type='GlobalRotScaleTrans',\n        rot_range=[-0.78539816, 0.78539816],\n        scale_ratio_range=[0.95, 1.05]),\n    dict(\n        type='PointsRangeFilter',\n        point_cloud_range=[0, -39.68, -3, 69.12, 39.68, 1]),\n    dict(\n        type='ObjectRangeFilter',\n        point_cloud_range=[0, -39.68, -3, 69.12, 39.68, 1]),\n    dict(type='PointShuffle'),\n    dict(\n        type='DefaultFormatBundle3D',\n        class_names=['Pedestrian', 'Cyclist', 'Car']),\n    dict(type='Collect3D', keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n]\ntest_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=4,\n        use_dim=4,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='MultiScaleFlipAug3D',\n        img_scale=(1333, 800),\n        pts_scale_ratio=1,\n        flip=False,\n        transforms=[\n            dict(\n                type='GlobalRotScaleTrans',\n                rot_range=[0, 0],\n                scale_ratio_range=[1.0, 1.0],\n                translation_std=[0, 0, 0]),\n            dict(type='RandomFlip3D'),\n            dict(\n                type='PointsRangeFilter',\n                point_cloud_range=[0, -39.68, -3, 69.12, 39.68, 1]),\n            dict(\n                type='DefaultFormatBundle3D',\n                class_names=['Pedestrian', 'Cyclist', 'Car'],\n                with_label=False),\n            dict(type='Collect3D', keys=['points'])\n        ])\n]\neval_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=4,\n        use_dim=4,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='DefaultFormatBundle3D',\n        class_names=['Pedestrian', 'Cyclist', 'Car'],\n        with_label=False),\n    dict(type='Collect3D', keys=['points'])\n]\ndata = dict(\n    samples_per_gpu=6,\n    workers_per_gpu=4,\n    train=dict(\n        type='RepeatDataset',\n        times=2,\n        dataset=dict(\n            type='KittiDataset',\n            data_root='/data/cmpe249-fa22/kitti/',\n            ann_file='/data/cmpe249-fa22/kitti/kitti_infos_train.pkl',\n            split='training',\n            pts_prefix='velodyne_reduced',\n            pipeline=[\n                dict(\n                    type='LoadPointsFromFile',\n                    coord_type='LIDAR',\n                    load_dim=4,\n                    use_dim=4,\n                    file_client_args=dict(backend='disk')),\n                dict(\n                    type='LoadAnnotations3D',\n                    with_bbox_3d=True,\n                    with_label_3d=True,\n                    file_client_args=dict(backend='disk')),\n                dict(\n                    type='ObjectSample',\n                    db_sampler=dict(\n                        data_root='/data/cmpe249-fa22/kitti/',\n                        info_path=\n                        '/data/cmpe249-fa22/kitti/kitti_dbinfos_train.pkl',\n                        rate=1.0,\n                        prepare=dict(\n                            filter_by_difficulty=[-1],\n                            filter_by_min_points=dict(\n                                Car=5, Pedestrian=5, Cyclist=5)),\n                        classes=['Pedestrian', 'Cyclist', 'Car'],\n                        sample_groups=dict(Car=15, Pedestrian=15, Cyclist=15),\n                        points_loader=dict(\n                            type='LoadPointsFromFile',\n                            coord_type='LIDAR',\n                            load_dim=4,\n                            use_dim=4,\n                            file_client_args=dict(backend='disk')),\n                        file_client_args=dict(backend='disk')),\n                    use_ground_plane=True),\n                dict(type='RandomFlip3D', flip_ratio_bev_horizontal=0.5),\n                dict(\n                    type='GlobalRotScaleTrans',\n                    rot_range=[-0.78539816, 0.78539816],\n                    scale_ratio_range=[0.95, 1.05]),\n                dict(\n                    type='PointsRangeFilter',\n                    point_cloud_range=[0, -39.68, -3, 69.12, 39.68, 1]),\n                dict(\n                    type='ObjectRangeFilter',\n                    point_cloud_range=[0, -39.68, -3, 69.12, 39.68, 1]),\n                dict(type='PointShuffle'),\n                dict(\n                    type='DefaultFormatBundle3D',\n                    class_names=['Pedestrian', 'Cyclist', 'Car']),\n                dict(\n                    type='Collect3D',\n                    keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n            ],\n            modality=dict(use_lidar=True, use_camera=False),\n            classes=['Pedestrian', 'Cyclist', 'Car'],\n            test_mode=False,\n            box_type_3d='LiDAR',\n            file_client_args=dict(backend='disk'))),\n    val=dict(\n        type='KittiDataset',\n        data_root='/data/cmpe249-fa22/kitti/',\n        ann_file='/data/cmpe249-fa22/kitti/kitti_infos_val.pkl',\n        split='training',\n        pts_prefix='velodyne_reduced',\n        pipeline=[\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=4,\n                use_dim=4,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='MultiScaleFlipAug3D',\n                img_scale=(1333, 800),\n                pts_scale_ratio=1,\n                flip=False,\n                transforms=[\n                    dict(\n                        type='GlobalRotScaleTrans',\n                        rot_range=[0, 0],\n                        scale_ratio_range=[1.0, 1.0],\n                        translation_std=[0, 0, 0]),\n                    dict(type='RandomFlip3D'),\n                    dict(\n                        type='PointsRangeFilter',\n                        point_cloud_range=[0, -39.68, -3, 69.12, 39.68, 1]),\n                    dict(\n                        type='DefaultFormatBundle3D',\n                        class_names=['Pedestrian', 'Cyclist', 'Car'],\n                        with_label=False),\n                    dict(type='Collect3D', keys=['points'])\n                ])\n        ],\n        modality=dict(use_lidar=True, use_camera=False),\n        classes=['Pedestrian', 'Cyclist', 'Car'],\n        test_mode=True,\n        box_type_3d='LiDAR',\n        file_client_args=dict(backend='disk')),\n    test=dict(\n        type='KittiDataset',\n        data_root='/data/cmpe249-fa22/kitti/',\n        ann_file='/data/cmpe249-fa22/kitti/kitti_infos_val.pkl',\n        split='training',\n        pts_prefix='velodyne_reduced',\n        pipeline=[\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=4,\n                use_dim=4,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='MultiScaleFlipAug3D',\n                img_scale=(1333, 800),\n                pts_scale_ratio=1,\n                flip=False,\n                transforms=[\n                    dict(\n                        type='GlobalRotScaleTrans',\n                        rot_range=[0, 0],\n                        scale_ratio_range=[1.0, 1.0],\n                        translation_std=[0, 0, 0]),\n                    dict(type='RandomFlip3D'),\n                    dict(\n                        type='PointsRangeFilter',\n                        point_cloud_range=[0, -39.68, -3, 69.12, 39.68, 1]),\n                    dict(\n                        type='DefaultFormatBundle3D',\n                        class_names=['Pedestrian', 'Cyclist', 'Car'],\n                        with_label=False),\n                    dict(type='Collect3D', keys=['points'])\n                ])\n        ],\n        modality=dict(use_lidar=True, use_camera=False),\n        classes=['Pedestrian', 'Cyclist', 'Car'],\n        test_mode=True,\n        box_type_3d='LiDAR',\n        file_client_args=dict(backend='disk')))\nevaluation = dict(\n    interval=2,\n    pipeline=[\n        dict(\n            type='LoadPointsFromFile',\n            coord_type='LIDAR',\n            load_dim=4,\n            use_dim=4,\n            file_client_args=dict(backend='disk')),\n        dict(\n            type='DefaultFormatBundle3D',\n            class_names=['Pedestrian', 'Cyclist', 'Car'],\n            with_label=False),\n        dict(type='Collect3D', keys=['points'])\n    ])\nlr = 0.001\noptimizer = dict(type='AdamW', lr=0.001, betas=(0.95, 0.99), weight_decay=0.01)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='cyclic',\n    target_ratio=(10, 0.0001),\n    cyclic_times=1,\n    step_ratio_up=0.4)\nmomentum_config = dict(\n    policy='cyclic',\n    target_ratio=(0.8947368421052632, 1),\n    cyclic_times=1,\n    step_ratio_up=0.4)\nrunner = dict(type='EpochBasedRunner', max_epochs=3)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(\n    interval=50,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='TensorboardLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nwork_dir = './work_dirs/hv_pointpillars_secfpn_6x8_160e_kitti-3d-3class'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\ngpu_ids = [0]\n", "seed": 0, "exp_name": "hv_pointpillars_secfpn_6x8_160e_kitti-3d-3class.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00101, "memory": 5668, "data_time": 0.36378, "loss_cls": 0.72677, "loss_bbox": 2.5695, "loss_dir": 0.14131, "loss": 3.43758, "grad_norm": 9.56385, "time": 1.03592}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00104, "memory": 5679, "data_time": 0.00878, "loss_cls": 0.52916, "loss_bbox": 2.12225, "loss_dir": 0.13912, "loss": 2.79052, "grad_norm": 7.38758, "time": 0.66559}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00109, "memory": 5725, "data_time": 0.00867, "loss_cls": 0.45886, "loss_bbox": 1.98059, "loss_dir": 0.13838, "loss": 2.57783, "grad_norm": 6.10761, "time": 0.66762}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00115, "memory": 5725, "data_time": 0.00865, "loss_cls": 0.43032, "loss_bbox": 1.92271, "loss_dir": 0.13766, "loss": 2.49069, "grad_norm": 5.77958, "time": 0.66482}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00124, "memory": 5725, "data_time": 0.00865, "loss_cls": 0.39839, "loss_bbox": 1.77837, "loss_dir": 0.13665, "loss": 2.3134, "grad_norm": 6.8852, "time": 0.66211}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00134, "memory": 5725, "data_time": 0.00867, "loss_cls": 0.40523, "loss_bbox": 1.85956, "loss_dir": 0.13709, "loss": 2.40187, "grad_norm": 5.91506, "time": 0.65716}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00146, "memory": 5725, "data_time": 0.00865, "loss_cls": 0.38814, "loss_bbox": 1.78988, "loss_dir": 0.13655, "loss": 2.31456, "grad_norm": 5.26499, "time": 0.65902}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.0016, "memory": 5725, "data_time": 0.00863, "loss_cls": 0.38203, "loss_bbox": 1.70865, "loss_dir": 0.13873, "loss": 2.22942, "grad_norm": 5.16124, "time": 0.65637}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00176, "memory": 5725, "data_time": 0.00874, "loss_cls": 0.37967, "loss_bbox": 1.74829, "loss_dir": 0.13612, "loss": 2.26408, "grad_norm": 5.32013, "time": 0.65513}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00193, "memory": 5725, "data_time": 0.00869, "loss_cls": 0.37679, "loss_bbox": 1.69084, "loss_dir": 0.13692, "loss": 2.20455, "grad_norm": 4.96559, "time": 0.6591}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.00212, "memory": 5725, "data_time": 0.0088, "loss_cls": 0.36448, "loss_bbox": 1.61647, "loss_dir": 0.13726, "loss": 2.11821, "grad_norm": 4.55474, "time": 0.65701}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.00232, "memory": 5725, "data_time": 0.00867, "loss_cls": 0.3559, "loss_bbox": 1.61295, "loss_dir": 0.1366, "loss": 2.10545, "grad_norm": 4.60918, "time": 0.65398}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.00254, "memory": 5725, "data_time": 0.00868, "loss_cls": 0.35527, "loss_bbox": 1.61047, "loss_dir": 0.13623, "loss": 2.10198, "grad_norm": 4.27047, "time": 0.65202}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.00276, "memory": 5725, "data_time": 0.00866, "loss_cls": 0.34568, "loss_bbox": 1.62486, "loss_dir": 0.1362, "loss": 2.10674, "grad_norm": 3.76157, "time": 0.65613}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.003, "memory": 5725, "data_time": 0.00878, "loss_cls": 0.34727, "loss_bbox": 1.58892, "loss_dir": 0.13673, "loss": 2.07293, "grad_norm": 3.54285, "time": 0.6603}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.00326, "memory": 5725, "data_time": 0.00869, "loss_cls": 0.34271, "loss_bbox": 1.63098, "loss_dir": 0.13581, "loss": 2.10951, "grad_norm": 3.50353, "time": 0.65657}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.00352, "memory": 5725, "data_time": 0.00868, "loss_cls": 0.34774, "loss_bbox": 1.67209, "loss_dir": 0.13733, "loss": 2.15716, "grad_norm": 3.87147, "time": 0.65711}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.00378, "memory": 5725, "data_time": 0.00866, "loss_cls": 0.33612, "loss_bbox": 1.54864, "loss_dir": 0.13645, "loss": 2.02121, "grad_norm": 2.81587, "time": 0.65458}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.00406, "memory": 5725, "data_time": 0.00869, "loss_cls": 0.34602, "loss_bbox": 1.61301, "loss_dir": 0.13572, "loss": 2.09475, "grad_norm": 3.06014, "time": 0.65546}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.00434, "memory": 5725, "data_time": 0.00879, "loss_cls": 0.33264, "loss_bbox": 1.59474, "loss_dir": 0.13711, "loss": 2.06449, "grad_norm": 2.78789, "time": 0.6589}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.00463, "memory": 5725, "data_time": 0.00869, "loss_cls": 0.32635, "loss_bbox": 1.59858, "loss_dir": 0.13662, "loss": 2.06155, "grad_norm": 2.73967, "time": 0.66296}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.00492, "memory": 5725, "data_time": 0.00868, "loss_cls": 0.3337, "loss_bbox": 1.57815, "loss_dir": 0.13589, "loss": 2.04774, "grad_norm": 2.74178, "time": 0.66046}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.00522, "memory": 5725, "data_time": 0.00867, "loss_cls": 0.32619, "loss_bbox": 1.53643, "loss_dir": 0.13634, "loss": 1.99896, "grad_norm": 2.63105, "time": 0.66239}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.00551, "memory": 5725, "data_time": 0.00868, "loss_cls": 0.33222, "loss_bbox": 1.60822, "loss_dir": 0.13609, "loss": 2.07653, "grad_norm": 2.34781, "time": 0.66252}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.00581, "memory": 5725, "data_time": 0.00865, "loss_cls": 0.33668, "loss_bbox": 1.57853, "loss_dir": 0.13656, "loss": 2.05177, "grad_norm": 2.27579, "time": 0.65334}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.0061, "memory": 5725, "data_time": 0.00866, "loss_cls": 0.32904, "loss_bbox": 1.58413, "loss_dir": 0.13523, "loss": 2.0484, "grad_norm": 2.03067, "time": 0.65334}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.00639, "memory": 5725, "data_time": 0.00877, "loss_cls": 0.32624, "loss_bbox": 1.55655, "loss_dir": 0.13641, "loss": 2.01921, "grad_norm": 2.07767, "time": 0.66839}
